package com.daoshan.school.demo.java_23_design_mode.structure_modes.facade_mode.main;

import com.daoshan.school.demo.java_23_design_mode.structure_modes.facade_mode.facade.Facade;

/**
 * 门面模式  （外观模式）
 *
 *
 * 医院的例子
 *
 *　现代的软件系统都是比较复杂的，设计师处理复杂系统的一个常见方法便是将其“分而治之”，把一个系统划分为几个较小的子系统。
 * 如果把医院作为一个子系统，按照部门职能，这个系统可以划分为挂号、门诊、划价、化验、收费、取药等。看病的病人要与这些部门打交道，
 * 就如同一个子系统的客户端与一个子系统的各个类打交道一样，不是一件容易的事情。
 *
 *　首先病人必须先挂号，然后门诊。如果医生要求化验，病人必须首先划价，然后缴费，才可以到化验部门做化验。化验后再回到门诊室。
 *
 * 上图描述的是病人在医院里的体验，图中的方框代表医院。
 *
 *　解决这种不便的方法便是引进门面模式，医院可以设置一个接待员的位置，由接待员负责代为挂号、划价、缴费、取药等。这个接待员
 *  就是门面模式的体现，病人只接触接待员，由接待员与各个部门打交道。
 *
 *
 *
 *
 * 　门面(Facade)角色 ：客户端可以调用这个角色的方法。此角色知晓相关的（一个或者多个）子系统的功能和责任。在正常情况下，
 * 本角色会将所有从客户端发来的请求委派到相应的子系统去。
 *
 *　 子系统(SubSystem)角色 ：可以同时有一个或者多个子系统。每个子系统都不是一个单独的类，而是一个类的集合（如上面的子系
 *  统就是由ModuleA、ModuleB、ModuleC三个类组合而成）。每个子系统都可以被客户端直接调用，或者被门面角色调用。子系统并不
 *   知道门面的存在，对于子系统而言，门面仅仅是另外一个客户端而已。
 *
 *
 *
 *   这样定义一个ModuleFacade类可以有效地屏蔽内部的细节，免得客户端去调用Module类时，发现一些不需要它知道的方法。
 *   比如a2()和a3()方法就不需要让客户端知道，否则既暴露了内部的细节，又让客户端迷惑。对客户端来说，他可能还要去思考a2()、
 *   a3()方法用来干什么呢？其实a2()和a3()方法是内部模块之间交互的，原本就不是对子系统外部的，所以干脆就不要让客户端知道。
 *
 *   一个系统可以有几个门面类
 *
 *　　在门面模式中，通常只需要一个门面类，并且此门面类只有一个实例，换言之它是一个单例类。当然这并不意味着在整个系统里
 *  只有一个门面类，而仅仅是说对每一个子系统只有一个门面类。或者说，如果一个系统有好几个子系统的话，每一个子系统都有一个门面类，
 *  整个系统可以有数个门面类。
 *
 *   为子系统增加新行为
 *
 *　　初学者往往以为通过继承一个门面类便可在子系统中加入新的行为，这是错误的。门面模式的用意是为子系统提供一个集中化和简化的沟通管道
 * ，而不能向子系统加入新的行为。比如医院中的接待员并不是医护人员，接待员并不能为病人提供医疗服务。
 *
 *
 *
 * 　门面模式的优点：
 *
 *　●　　松散耦合
 *
 *　门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。
 *
 *　●　　简单易用
 *
 *　门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。
 *
 *　●　　更好的划分访问层次
 *
 *　通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。
 */
public class Main {

    //门面模式
    public static void main(String[] args) {
        //实例化门面对象
        Facade.Facade1 facade = Facade.getFacade1();
        //执行去医院买药操作
        facade.goToHospital();
    }
}
